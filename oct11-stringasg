/* readin and writing a file in c++*/

/*COURTESY:http://www.cplusplus.com/doc/tutorial/files/*/

C++ provides the following classes to perform output and input of characters to/from files: 

ofstream: Stream class to write on files
ifstream: Stream class to read from files
fstream: Stream class to both read and write from/to files.

These classes are derived directly or indirectly from the classes istream and ostream. We have already used objects whose types were these classes: cin is an object of class istream and cout is an object of class ostream. Therefore, we have already been using classes that are related to our file streams. And in fact, we can use our file streams the same way we are already used to use cin and cout, with the only difference that we have to associate these streams with physical files. Let's see an example:

#include<iostream>
#include<fstream>
using namespace std;
int main(){
    
    ofstream fwritin("test.txt");                 /*can declare stream object and open the stream on the same line but not like 
    
                                       ofstream fwritin.open("test.txt")   */
	  
    
    
   // fwritin.open("test.txt");
    fwritin<<"this sentence is inside test\nthis is on next line";
    
    fwritin.close();
    return 0;
}


/*IF WRITE THE FILE AGAIN IT WILL START FROM THE BEGINNING BY DEFAULT AND REMOVE THE PREVIOUS TEXT*/

Open a file
The first operation generally performed on an object of one of these classes is to associate it to a real file. This procedure is known as to open a file. An open file is represented within a program by a stream (i.e., an object of one of these classes; in the previous example, this was myfile) and any input or output operation performed on this stream object will be applied to the physical file associated to it.

In order to open a file with a stream object we use its member function open:

open (filename, mode);

Where filename is a string representing the name of the file to be opened, and mode is an optional parameter with a combination of the following flags:

ios::in	Open for input operations.
ios::out	Open for output operations.
ios::binary	Open in binary mode.
ios::ate	Set the initial position at the end of the file.
If this flag is not set, the initial position is the beginning of the file.
ios::app	All output operations are performed at the end of the file, appending the content to the current content of the file.
ios::trunc	If the file is opened for output operations and it already existed, its previous content is deleted and replaced by the new one.

All these flags can be combined using the bitwise operator OR (|). For example, if we want to open the file example.bin in binary mode to add data we could do it by the following call to member function open:

1
2
ofstream myfile;
myfile.open ("example.bin", ios::out | ios::app | ios::binary); 


Each of the open member functions of classes ofstream, ifstream and fstream has a default mode that is used if the file is opened without a second argument:

class	default mode parameter
ofstream	ios::out
ifstream	ios::in
fstream	ios::in | ios::out

For ifstream and ofstream classes, ios::in and ios::out are automatically and respectively assumed, even if a mode that does not include them is passed as second argument to the open member function (the flags are combined).

For fstream, the default value is only applied if the function is called without specifying any value for the mode parameter. If the function is called with any value in that parameter the default mode is overridden, not combined.

File streams opened in binary mode perform input and output operations independently of any format considerations. Non-binary files are known as text files, and some translations may occur due to formatting of some special characters (like newline and carriage return characters).

Since the first task that is performed on a file stream is generally to open a file, these three classes include a constructor that automatically calls the open member function and has the exact same parameters as this member. Therefore, we could also have declared the previous myfile object and conduct the same opening operation in our previous example by writing:

 
ofstream myfile ("example.bin", ios::out | ios::app | ios::binary);


Combining object construction and stream opening in a single statement. Both forms to open a file are valid and equivalent.

To check if a file stream was successful opening a file, you can do it by calling to member is_open. This member function returns a bool value of true in the case that indeed the stream object is associated with an open file, or false otherwise:

 
if (myfile.is_open()) { /* ok, proceed with output */ }

Closing a file
When we are finished with our input and output operations on a file we shall close it so that the operating system is notified and its resources become available again. For that, we call the stream's member function close. This member function takes flushes the associated buffers and closes the file:

 
myfile.close();


Once this member function is called, the stream object can be re-used to open another file, and the file is available again to be opened by other processes.

In case that an object is destroyed while still associated with an open file, the destructor automatically calls the member function close.

/*USING app FLAG IN WRITING A FILE*/

#include<iostream>
#include<fstream>
using namespace std;
int main(){
    
    ofstream fwritin("test.txt",ios::app);
	//fwritin.open("test.txt");
	if(fwritin.is_open()){                                    /*NOTE THE .is_open() function*/
	
    fwritin<<"appended text";
    fwritin.close();}
    return 0;
}
/* READING A FILE*/

// reading a text file
#include <iostream>
#include <fstream>
#include <string>
using namespace std;

int main () {
  string line;
  ifstream myfile ("example.txt");
  if (myfile.is_open())
  {
    while ( getline (myfile,line) )
    {
      cout << line << '\n';/*CAN MODIFY A FILE MANUALLY AND SAVE IT AND STREAM OBJECT WILL READ IT PERFECTLY*/  
    }
    myfile.close();
  }

  else cout << "Unable to open file"; 

  return 0;
}

Checking state flags
The following member functions exist to check for specific states of a stream (all of them return a bool value): 

bad()
Returns true if a reading or writing operation fails. For example, in the case that we try to write to a file that is not open for writing or if the device where we try to write has no space left.
fail()
Returns true in the same cases as bad(), but also in the case that a format error happens, like when an alphabetical character is extracted when we are trying to read an integer number.
eof()
Returns true if a file open for reading has reached the end.
good()
It is the most generic state flag: it returns false in the same cases in which calling any of the previous functions would return true. Note that good and bad are not exact opposites (good checks more state flags at once).

The member function clear() can be used to reset the state flags.

/*FOR FURTHER READ GO TO http://www.cplusplus.com/doc/tutorial/files/*/

/* THIS PROGRAM WORKS FOR READING A FILE AND OUTPUTS EACH WORD IN THE WHOLE TEXT*/
#include<iostream>
#include<fstream>
#include<string>
#include<map>
using namespace std;
int main(){
    map<string,int> words;
    map<string,int>::iterator itr;
    string::iterator it;
    string line,test;
    test="test.txt";
    ifstream freadin(test.c_str());
	//fwritin.open("test.txt");
	if(freadin.is_open()){
	        while(freadin>>line){
				//cout<<line<<endl;
				itr=map.find(line);
				if(itr!=map.end())
					(itr->second)++;
				else 
					{
					it=line.end();/*maybe -1 it*/
					if(!isalpha(*it))     /*brackets on it*/
					line.pop_back();
					map.insert(pair<string,int>(line,1));
					}
			}
    
    }
    freadin.close();
    return 0;
}














